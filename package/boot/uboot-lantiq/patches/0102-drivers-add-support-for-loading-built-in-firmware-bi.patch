From 22819bddb27781ed7f3f373de8c736cd1a7f1885 Mon Sep 17 00:00:00 2001
From: Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
Date: Sun, 9 Feb 2014 01:01:59 +0100
Subject: [PATCH 102/158] drivers: add support for loading built-in firmware
 binaries

Signed-off-by: Daniel Schwierzeck <daniel.schwierzeck@gmail.com>
---
 Makefile                    |  2 ++
 drivers/firmware/Makefile   |  7 ++++++
 drivers/firmware/firmware.c | 60 +++++++++++++++++++++++++++++++++++++++++++++
 firmware/.gitignore         |  1 +
 firmware/Makefile           | 51 ++++++++++++++++++++++++++++++++++++++
 include/firmware.h          | 25 +++++++++++++++++++
 6 files changed, 146 insertions(+)
 create mode 100644 drivers/firmware/Makefile
 create mode 100644 drivers/firmware/firmware.c
 create mode 100644 firmware/.gitignore
 create mode 100644 firmware/Makefile
 create mode 100644 include/firmware.h

diff --git a/Makefile b/Makefile
index e427fee884..5e24505029 100644
--- a/Makefile
+++ b/Makefile
@@ -599,6 +599,7 @@ libs-y += disk/
 libs-y += drivers/
 libs-$(CONFIG_DM) += drivers/core/
 libs-y += drivers/dma/
+libs-$(CONFIG_FW_LOADER) += drivers/firmware/
 libs-y += drivers/gpio/
 libs-y += drivers/i2c/
 libs-y += drivers/input/
@@ -635,6 +636,7 @@ libs-$(CONFIG_HAS_POST) += post/
 libs-y += test/
 libs-y += test/dm/
 libs-$(CONFIG_DM_DEMO) += drivers/demo/
+libs-y += firmware/
 
 ifneq (,$(filter $(SOC), mx25 mx27 mx5 mx6 mx31 mx35 mxs vf610))
 libs-y += arch/$(ARCH)/imx-common/
diff --git a/drivers/firmware/Makefile b/drivers/firmware/Makefile
new file mode 100644
index 0000000000..8c163144cb
--- /dev/null
+++ b/drivers/firmware/Makefile
@@ -0,0 +1,7 @@
+#
+# Copyright (C) 2014 Daniel Schwierzeck, daniel.schwierzeck@gmail.com
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y	+= firmware.o
diff --git a/drivers/firmware/firmware.c b/drivers/firmware/firmware.c
new file mode 100644
index 0000000000..2f872c556c
--- /dev/null
+++ b/drivers/firmware/firmware.c
@@ -0,0 +1,60 @@
+/*
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <malloc.h>
+#include <firmware.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+struct builtin_fw {
+	char *name;
+	void *data;
+	unsigned long size;
+};
+
+static struct builtin_fw *lookup_firmware(const char *name)
+{
+	struct builtin_fw *fw;
+	struct builtin_fw *fw_start =
+		ll_entry_start(struct builtin_fw, builtin_fw);
+	const int fw_entries = ll_entry_count(struct builtin_fw, builtin_fw);
+	int len;
+
+	if (!fw_start || !fw_entries)
+		return NULL;
+
+	len = strlen(name);
+
+	for (fw = fw_start; fw != fw_start + fw_entries; fw++) {
+		if (strncmp(name, fw->name, len))
+			continue;
+
+		if (len == strlen(fw->name))
+			return fw;
+	}
+
+	return NULL;
+}
+
+int request_firmware(struct firmware *fw, const char *name)
+{
+	struct builtin_fw *builtin_fw;
+
+	if (!fw)
+		return -EINVAL;
+
+	debug("firmware: using built-in firmware %s\n", name);
+
+	builtin_fw = lookup_firmware(name);
+	if (!builtin_fw) {
+		debug("%s: lookup_firmware failed\n", __func__);
+		return -ENODATA;
+	}
+
+	fw->data = builtin_fw->data + gd->reloc_off;
+	fw->size = builtin_fw->size;
+
+	return 0;
+}
diff --git a/firmware/.gitignore b/firmware/.gitignore
new file mode 100644
index 0000000000..9c8bdb9fdc
--- /dev/null
+++ b/firmware/.gitignore
@@ -0,0 +1 @@
+*.gen.S
diff --git a/firmware/Makefile b/firmware/Makefile
new file mode 100644
index 0000000000..79bede97f7
--- /dev/null
+++ b/firmware/Makefile
@@ -0,0 +1,51 @@
+#
+# kbuild file for firmware/
+#
+
+#fw-shipped-$(CONFIG_XXX) += xxx/xxx.bin
+
+fw-shipped-all := $(fw-shipped-y) $(fw-shipped-m) $(fw-shipped-)
+
+quiet_cmd_fwbin = MK_FW   $@
+      cmd_fwbin = FWNAME="$(patsubst firmware/%.gen.S,%,$@)";		     \
+		  FWSTR="$(subst /,_,$(subst .,_,$(subst -,_,$(patsubst	     \
+				firmware/%.gen.S,%,$@))))";		     \
+		  FWBIN="$(if $(KBUILD_SRC),$(KBUILD_SRC)/$(2),$(2))";	     \
+		  ASM_WORD=$(if $(CONFIG_64BIT),.quad,.long);		     \
+		  ASM_ALIGN=$(if $(CONFIG_64BIT),3,2);			     \
+		  PROGBITS=$(if $(CONFIG_ARM),%,@)progbits;		     \
+		  echo "/* Generated by firmware/Makefile */"		> $@;\
+		  echo "    .section .rodata"				>>$@;\
+		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
+		  echo "_fw_$${FWSTR}_bin:"				>>$@;\
+		  echo "    .incbin \"$${FWBIN}\""			>>$@;\
+		  echo "_fw_end:"					>>$@;\
+		  echo "   .section .rodata.str,\"aMS\",$${PROGBITS},1"	>>$@;\
+		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
+		  echo "_fw_$${FWSTR}_name:"				>>$@;\
+		  echo "    .string \"$$FWNAME\""			>>$@;\
+		  echo "    .section .u_boot_list_2_builtin_fw_2_$${FWSTR}">>$@;\
+		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
+		  echo "    $${ASM_WORD} _fw_$${FWSTR}_name"		>>$@;\
+		  echo "    $${ASM_WORD} _fw_$${FWSTR}_bin"		>>$@;\
+		  echo "    $${ASM_WORD} _fw_end - _fw_$${FWSTR}_bin"	>>$@;
+
+$(patsubst %,$(obj)/%.gen.S, $(fw-shipped-y)): %:
+	$(call cmd,fwbin,$(patsubst %.gen.S,%,$@))
+
+# The .o files depend on the binaries directly; the .S files don't.
+$(patsubst %,$(obj)/%.gen.o, $(fw-shipped-y)): %.gen.o: %
+
+$(firmware-dirs):
+	$(call cmd,mkdir)
+
+obj-y += $(patsubst %,%.gen.o, $(fw-shipped-y))
+
+# Remove .S files and binaries created from ihex
+# (during 'make clean' .config isn't included so they're all in $(fw-shipped-))
+targets := $(fw-shipped-) $(patsubst $(obj)/%,%, \
+				$(shell find $(obj) -name \*.gen.S 2>/dev/null))
+
+# Without this, built-in.o won't be created when it's empty, and the
+# final vmlinux link will fail.
+obj- := dummy
diff --git a/include/firmware.h b/include/firmware.h
new file mode 100644
index 0000000000..004d3480d2
--- /dev/null
+++ b/include/firmware.h
@@ -0,0 +1,25 @@
+/*
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef _FIRMWARE_H
+#define _FIRMWARE_H
+
+#include <linux/types.h>
+#include <errno.h>
+
+struct firmware {
+	size_t size;
+	const u8 *data;
+};
+
+#if defined(CONFIG_FW_LOADER)
+int request_firmware(struct firmware *fw, const char *name);
+#else
+static inline int request_firmware(struct firmware *fw, const char *name)
+{
+	return -EINVAL;
+}
+#endif
+
+#endif
-- 
2.11.0

